@inject NavigationManager NavigationManager


    <BSModal @ref="Modal" IsFullScreen="true" IsScrollable="true" Size="Size.ExtraLarge" >
        <Header>Select asset</Header>
        <Content>
            <ContentItemTypeList2 Closed="(a, x) => { if (x == true) ItemAdded((ContentItemTypeList2)a); }" ListMode="EntityListMode.Single"></ContentItemTypeList2>
        </Content>
        <Footer>
            <BSButton Color="BSColor.Primary" @onclick="() => Modal.HideAsync() ">Ok</BSButton>
        </Footer>
    </BSModal>

    <div class="content-selector">
        <BSListGroup>
        <BSListGroupItem>
                <div style="display: flex; align-items: center; justify-content: space-between;">
                  
                    @if (ContentItem != null)
                    {
                        <span class="badge bg-primary">@ContentItem.Schema.Name</span>

                        @foreach (string field in ContentItem.Schema.ReferenceFields)
                        {
                            if (ContentItem.TryGetField(field, out ContentField column))
                            {
                                @if (column is ISingleValueField singleValueField)
                                {
                                    <span>@singleValueField.Value</span>
                                }
                                else if (column is AssetField assetField)
                                {
                                    @if (assetField.Asset != null && assetField.Asset.IsImage())
                                    {
                                        <img src="@assetField.Asset.PreviewUrl" style="height:2rem;object-fit:contain" />
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                      <span>...</span>
                    }

                    <div class="options">
                        @if (ContentItem != null)
                        {
                            <BSButton Color="BSColor.Light" OnClick="e => Navigate()" title="Navigate"><i class="fas fa-arrow-right"></i></BSButton>                        
                            <BSButton Color="BSColor.Light" OnClick="e => RemoveItem()" title="Remove"><i class="fas fa-times"></i></BSButton>
                        }
                        <BSButton Color="BSColor.Light" title="Select" OnClick="e => Modal.ShowAsync()"><i class="fas fa-plus"></i></BSButton>
                    </div>
                </div>
            </BSListGroupItem>
        </BSListGroup>
    </div>

@code {

    [Parameter]
    public BSModal Modal { get; set; }

    private ContentItem _contentItem;

    [Parameter]
    public ContentItem ContentItem 
    {
        get => _contentItem;
        set
        {
            _contentItem = value;

            ContentItemChanged?.Invoke(_contentItem);
        }
    }

    [Parameter]
    public Action<ContentItem> ContentItemChanged { get; set; }

    protected void Navigate()
    {
        NavigationManager.NavigateToContent(ContentItem);
    }

    protected void RemoveItem()
    {
        ContentItem = null;
    }

    public async void ItemAdded(ContentItemTypeList2 sender)
    {
        ContentItem = sender.SelectedContentItem;

        await Modal.HideAsync();

        StateHasChanged();
    }
}
