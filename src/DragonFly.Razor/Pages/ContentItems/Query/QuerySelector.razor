@inject ComponentManager FieldComponentManager

@if (ContentItemList.Schema != null)
{
    <h4>Order</h4>

    <BSListGroup>
    @foreach (FieldOrder field in ContentItemList.OrderFields)
    {
    <BSListGroupItem style="display:flex;align-items:center">
        <span>@field.Name</span>
        <div style="flex-grow:1"></div>

        <OrderDirection Order="field" />
        <BSButton Color="Color.Light" OnClick="x => ContentItemList.OrderFields.MoveUp(field)"><i class="fas fa-arrow-up"></i></BSButton>
        <BSButton Color="Color.Light" OnClick="x => ContentItemList.OrderFields.MoveDown(field)"><i class="fas fa-arrow-down"></i></BSButton>
        <BSButton Color="Color.Light" OnClick="x => ContentItemList.OrderFields.Remove(field)"><i class="fas fa-times"></i></BSButton>        
    </BSListGroupItem>
    }
    </BSListGroup>

    @if (GetUnsedOrderFields().Any())
    {
        <BSDropdown>
            <BSDropdownToggle Color="Color.Light">Add field</BSDropdownToggle>
            <BSDropdownMenu>
                @foreach (var field in GetUnsedOrderFields())
                {
                    <BSDropdownItem OnClick="x => ContentItemList.OrderFields.Add(new FieldOrder(field.Key, true))">@field.Key</BSDropdownItem>
                }
            </BSDropdownMenu>
        </BSDropdown>
    }

    <h4>Filter</h4>
    <BSListGroup>
	
    @foreach (var fieldQuery in ContentItemList.QueryFields)
    {
        <BSListGroupItem>
            <BSLabel class="form-label badge bg-secondary">@fieldQuery.FieldName</BSLabel>
            @FieldComponentManager.CreateComponent(fieldQuery)
        </BSListGroupItem>
    }
    </BSListGroup>
}

@code {

    [Parameter]
    public ContentItemListBase ContentItemList { get; set; }

    [Parameter]
    public ISchemaElement Schema { get; set; }

    public IEnumerable<KeyValuePair<string, SchemaField>> GetUnsedOrderFields()
    {
        return ContentItemList.Schema.Fields
                                          .Where(x => ContentFieldManager.Default.CreateField(x.Value.FieldType).CanSorting)
                                          .Where(f => ContentItemList.OrderFields.Any(a => a.Name == f.Key) == false)
                                          ;
    }
}