@inject FieldComponentManager FieldComponentManager

<BSButton Color="Color.Light" class="add-field" OnClick="x => ShowModalDialog = true"><i class="fas fa-plus"></i> Add Field</BSButton>

<ModalWindow Show="ShowModalDialog" Closed="ItemAdded">
    <ContentFieldSelector @ref="Selector">

    </ContentFieldSelector>
</ModalWindow>

<BSListGroup>
    @foreach (var field in Schema.Fields.OrderBy(x => x.Value.SortKey))
    {
        <ContentFieldItemView Key="@field.Key" Field="@field.Value" FieldsView="this" />
    }
</BSListGroup>

@code {
    [Parameter]
    public IContentSchema Schema { get; set; }

    [Parameter]
    public string OptionIdSuffix { get; set; } = "option";

    bool IsOpen { get; set; }

    public ContentFieldSelector Selector { get; set; }

    public bool ShowModalDialog { get; set; }

    protected void ItemAdded(object sender, bool result)
    {
        if (result)
        {
            ContentField defaultInstance = ContentFieldManager.Default.CreateField(Selector.ContentFieldType);

            Schema.Fields.Add(Selector.Name, new ContentSchemaField(Selector.ContentFieldType.Name, ContentFieldManager.Default.CreateOptions(Selector.ContentFieldType)));

            ShowModalDialog = false;

            StateHasChanged();
        }
    }

    public void Up(string key)
    {
        var list = Schema.Fields
                                    .OrderBy(x => x.Value.SortKey)
                                    .ToList();

        for (int i = 0; i < list.Count; i++)
        {
            if (i != 0 && list[i].Key == key)
            {
                list[i - 1].Value.SortKey = i;
                list[i].Value.SortKey = i - 1;
            }
            else
            {
                list[i].Value.SortKey = i;
            }
        }

        StateHasChanged();
    }

    public void Down(string key)
    {
        var list = Schema.Fields
                                    .OrderBy(x => x.Value.SortKey)
                                    .ToList();

        for (int i = 0; i < list.Count; i++)
        {
            if (i < list.Count - 1 && list[i].Key == key)
            {
                list[i].Value.SortKey = i + 1;
                list[i + 1].Value.SortKey = i;
                i++;
            }
            else
            {
                list[i].Value.SortKey = i;
            }
        }

        StateHasChanged();
    }
}
