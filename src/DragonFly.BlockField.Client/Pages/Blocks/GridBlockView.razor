@inherits BlockComponent<GridBlock>
@inject ComponentManager ComponentManager
@inject BlockFieldManager BlockFieldManager

@if (_show)
{
    <BSOffCanvas @ref="_offCanvas" Placement="Placement.Right">
        <Header>Select block</Header>
        <Content>
            @foreach (Block block in BlockFieldManager.GetAllBlocks())
            {
                <div>
                    <BSButton Color="BSColor.Light" OnClick="e => Add(block)" style="width: 100%;text-align:left;margin-bottom:0.5rem"><i class="@block.CssIcon" style="margin-right: 0.5rem;" />@block.Name</BSButton>
                </div>
            }
        </Content>
    </BSOffCanvas>
}

<div class="grid-block">

    <div>
        <BSButton Color="BSColor.Light" class="block-field-add-btn" OnClick="e => OpenModal()" title="Add block">
            <i class="fas fa-plus"></i> Add block
        </BSButton>
    </div>

    <div class="grid-block-content" style="display:grid; grid-template-columns: @GetTemplateColumns(); grid-template-rows:@GetTemplateRows()">

        @*add column buttons*@
        @for (int i = 0; i < Block.Columns.Count; i++)
        {
            int local = i;

            <button class="btn btn-light" style="grid-column: @((i*2)+3); grid-row: 2" @onclick="x => AddColumn(local)" title="Add column"><i class="fa-solid fa-plus"></i></button>
        }

        <button class="btn btn-light" style="grid-column: @(Block.Columns.Count * 2 + 3); grid-row: 2" @onclick="x => AddColumn(Block.Columns.Count)" title="Add column"><i class=" fa-solid fa-plus"></i></button>

        @*config column buttons*@
        @for (int i = 0; i < Block.Columns.Count; i++)
        {
            int local = i;

            <div style="display:flex; gap: 0.25rem; justify-content: center; align-items: center; grid-column: @((i*2)+4); grid-row: 1">
                <DragonFly.BlockField.Client.Pages.Blocks.Grid.GridUnitView Span="Block.Columns[local]" />
            </div>
        }

        @*remove column buttons*@
        @for (int i = 0; i < Block.Columns.Count; i++)
        {
            int local = i;

            <button class="btn btn-light" style="display:flex; gap: 0.25rem; justify-content: center; align-items: center; grid-column: @((i*2)+4); grid-row: 2" @onclick="x => RemoveColumn(local)" title="Remove column"><i class="fa-solid fa-minus"></i></button>
        }

        @*add row buttons*@
        @for (int i = 0; i < Block.Rows.Count; i++)
        {
            int local = i;

            <button class="btn btn-light" style="grid-column: 2; grid-row: @((i*2)+3)" @onclick="x => AddRow(local)" title="Add row"><i class="fa-solid fa-plus"></i></button>
        }

        <button class="btn btn-light" style="grid-column: 2; grid-row: @(Block.Rows.Count * 2 + 3)" @onclick="x => AddRow(Block.Rows.Count)" title="Add row"><i class="fa-solid fa-plus"></i></button>

        @*config row buttons*@
        @for (int i = 0; i < Block.Rows.Count; i++)
        {
            int local = i;

            <div style="display:flex; gap: 0.25rem; justify-content: center; align-items: center; grid-column: 1; grid-row: @((i*2)+4)">
                <DragonFly.BlockField.Client.Pages.Blocks.Grid.GridUnitView Span="Block.Rows[local]" Vertical="true" />
            </div>
        }

        @*remove row buttons*@
        @for (int i = 0; i < Block.Rows.Count; i++)
        {
            int local = i;

            <button class="btn btn-light" style="grid-column: 2; grid-row: @((i*2)+4)" @onclick="x => RemoveRow(local)" title="Remove row"><i class="fa-solid fa-minus"></i></button>
        }

        @* add block placeholder *@
        @for (int i = 0; i < Block.Columns.Count; i++)
        {
            for (int k = 0; k < Block.Rows.Count; k++)
            {
                <div class="grid-span-item" style="display:flex; justify-content: center; align-items: center; grid-column: @((i*2)+4); grid-row: @((k*2)+4)">
                    <span>@(i + 1) / @(k + 1)</span>
                </div>
            }
        }

        @* blocks *@
        @foreach (GridItem item in Block.Items)
        {
            GridItem currentItem = item;

            <div class="grid-item" style="grid-column: @(CalcPosStart(item.ColumnStart)) / @(CalcPosEnd(item.ColumnEnd)); grid-row: @(CalcPosStart(item.RowStart)) / @(CalcPosEnd(item.RowEnd))">
                <div style="display:grid; grid-template-columns: auto 1fr auto; grid-template-rows: auto 1fr auto; width: 100%; height: 100%;">
                    <!--left-->
                    <div style="display:flex; flex-direction: column; align-items: stretch; justify-content: center; grid-column: 1; grid-row: 2">
                        <BSButton Color="BSColor.Light" OnClick="x => currentItem.ColumnStart--"><i class="fas fa-arrow-left"></i></BSButton>
                        <BSButton Color="BSColor.Light" OnClick="x => currentItem.ColumnStart++"><i class="fas fa-arrow-right"></i></BSButton>
                    </div>
                    <!--right-->
                    <div style="display:flex; flex-direction: column; align-items: stretch; justify-content: center; grid-column: 3; grid-row: 2">
                        <BSButton Color="BSColor.Light" OnClick="x => currentItem.ColumnEnd++"><i class="fas fa-arrow-right"></i></BSButton>
                        <BSButton Color="BSColor.Light" OnClick="x => currentItem.ColumnEnd--"><i class="fas fa-arrow-left"></i></BSButton>
                    </div>
                    <!--top-->
                    <div style="display:flex; flex-direction: row; align-items: stretch; justify-content: center; grid-column: 2; grid-row: 1">
                        <BSButton Color="BSColor.Light" OnClick="x => currentItem.RowStart--"><i class="fas fa-arrow-up"></i></BSButton>
                        <BSButton Color="BSColor.Light" OnClick="x => currentItem.RowStart++"><i class="fas fa-arrow-down"></i></BSButton>
                    </div>
                    <!--bottom-->
                    <div style="display:flex; flex-direction: row; align-items: stretch; justify-content: center; grid-column: 2; grid-row: 3">
                        <BSButton Color="BSColor.Light" OnClick="x => currentItem.RowEnd++"><i class="fas fa-arrow-down"></i></BSButton>
                        <BSButton Color="BSColor.Light" OnClick="x => currentItem.RowEnd--"><i class="fas fa-arrow-up"></i></BSButton>
                    </div>
                     <!--remove button-->
                    <div style="display:flex; grid-column: 3; grid-row: 1">
                        <BSButton Color="BSColor.Light" OnClick="x => Block.Items.Remove(currentItem)" title="Remove block"><i class="fas fa-times"></i></BSButton>
                    </div>
                    <!--position-->
                    <div style="display:flex; grid-column: 1; grid-row: 1; justify-content: center; align-items: center">
                        <span>@item.ColumnStart / @item.ColumnEnd</span>
                    </div>
                    <!--field-->
                    <div style="display:flex; grid-column: 2; grid-row: 2; align-items:center; justify-content: center">
                        @ComponentManager.CreateComponent(item.Block)
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private BSOffCanvas? _offCanvas;

    private bool _show = true;

    protected override void OnInitialized()
    {
        base.OnInitialized();


    }

    private int CalcPosStart(int value)
    {
        return  value * 2 + 2;
    }

    private int CalcPosEnd(int value)
    {
        return value * 2 + 1;
    }

    private string GetTemplate(ICollection<GridSpan> spans)
    {
        List<string> builder = new List<string>(spans.Count * 2 + 3);

        builder.Add("auto");
        builder.Add("auto");
        builder.Add("auto");

        foreach (GridSpan column in spans)
        {
            //builder.Add($"{column.Value}{column.Unit.ToCss()}");
            builder.Add("1fr");
            builder.Add("auto");
        }

        return string.Join(' ', builder);
    }

    private string GetTemplateColumns() => GetTemplate(Block.Columns);
    private string GetTemplateRows() => GetTemplate(Block.Rows);

    private void AddColumn(int pos)
    {
        foreach (var item in Block.Items)
        {
            if (item.ColumnStart >= pos)
            {
                item.ColumnStart++;
                item.ColumnEnd++;
            }
        }

        Block.Columns.Insert(pos, new GridSpan());
    }

    private void AddRow(int pos)
    {
        foreach (var item in Block.Items)
        {
            if (item.RowStart >= pos)
            {
                item.RowStart++;
                item.RowEnd++;
            }
        }

        Block.Rows.Insert(pos, new GridSpan());
    }

    private void RemoveColumn(int pos)
    {
        foreach (var item in Block.Items)
        {
            if (item.ColumnStart >= pos)
            {
                item.ColumnStart--;
                item.ColumnEnd--;
            }
        }

        Block.Columns.RemoveAt(pos);
    }

    private void RemoveRow(int pos)
    {
        foreach (var item in Block.Items)
        {
            if (item.RowStart >= pos)
            {
                item.RowStart--;
                item.RowEnd--;
            }
        }

        Block.Rows.RemoveAt(pos);
    }

    public async Task OpenModal()
    {
        _show = true;

        await _offCanvas.ToggleAsync();
    }

    private async Task Add(Block block)
    {
        await _offCanvas.ToggleAsync();

        _show = true;

        Block.Items.Insert(0, new GridItem() { Block = block });
    }

}
