@page "/login"
@using DragonFly.AspNetCore.Permissions
@using System.Security.Claims
@inject AuthenticationStateProvider Auth
@inject NavigationManager NavigationManager
@inject ILoginService LoginService
@inject IOptions<GeneralOptions> Options
@inject IDragonFlyApi Api
@attribute [AllowAnonymous]

@if (ShowLoginPage)
{
    <div style="display:flex; flex: 1; justify-content:center">
        <div class="form-signin" style="width: 100%; max-width: 350px; padding: 15px; margin: auto;">
            <EditForm FormName="LoginForm" Model="Credentials" OnSubmit="LoginAsync">
                <h1 class="h3 mb-3 font-weight-normal">@Options.Value.Name</h1>

                <div class="form-floating mb-3">
                    <InputText @bind-Value="Credentials.Username" type="text" class="form-control" placeholder="Username"></InputText>
                    <label>Username</label>
                </div>
                <div class="form-floating">
                    <InputText @bind-Value="Credentials.Password" type="password" class="form-control"  placeholder="Password"></InputText>
                    <label>Password</label>
                </div>

                <button class="btn btn-lg btn-primary btn-block mt-3" type="submit">Login</button>
                <p class="mt-5 mb-3 text-muted">© @DateTime.Now.Year</p>
            </EditForm>
        </div>
    </div>
}

<p style="text-align:center">Version: @Api.GetVersion()</p>

@code {
    [SupplyParameterFromForm]
    public Credentials Credentials { get; set; } = new Credentials();

    public bool ShowLoginPage { get; set; }

    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IdentityUser? currentUser = await LoginService.GetCurrentUserAsync();

        if (currentUser != null)
        {
            await MarkAsAuth();
        }

        ShowLoginPage = true;
    }

    public async Task LoginAsync()
    {
        LoginResult result = await LoginService.LoginAsync(Credentials.Username, Credentials.Password, true);

        if (result.Success)
        {
            Claim[] claims = result.Claims.Select(x => new Claim(x.Type, x.Value)).ToArray();

            if (Auth is BlazorClientAuthenticationStateProvider clientAuthenticationStateProvider)
            {
                clientAuthenticationStateProvider.SetCurrentPrincipal(new ClaimsPrincipal(new ClaimsIdentity(claims, "Password")));
            }

            if (ReturnUrl != null)
            {
                NavigationManager.NavigateTo(NavigationManager.ToAbsoluteUri(ReturnUrl).ToString());
            }
            else
            {
                NavigationManager.NavigateTo(".");
            }
        }
        else
        {
            throw new Exception("Login failed.");
        }
    }

    private async Task MarkAsAuth()
    {
        IdentityUser? currentUser = await LoginService.GetCurrentUserAsync();

        if (currentUser == null)
        {
            return;
        }

        Claim[] claims = [new Claim(ClaimTypes.Name, currentUser.Username)];

        ((BlazorClientAuthenticationStateProvider)Auth).SetCurrentPrincipal(new ClaimsPrincipal(new ClaimsIdentity(claims, "Password")));

        if (ReturnUrl != null)
        {
            NavigationManager.NavigateTo(NavigationManager.ToAbsoluteUri(ReturnUrl).ToString());
        }
        else
        {
            NavigationManager.NavigateTo(".");
        }
    }
}
