@inject ComponentManager ComponentManager
@inject BlockManager BlockFieldManager

<BSOffCanvas @ref="_offCanvas" Placement="Placement.Right">
    <Header>Select block</Header>
    <Content>
        @foreach (BlockFactory block in BlockFieldManager.GetAllBlocks())
        {
            <div>
                <FluentButton OnClick="e => Add(block)" style="width: 100%;text-align:left;margin-bottom:0.5rem"><i class="@block.CssIcon" style="margin-right: 0.5rem;" />@block.GetDisplayName()</FluentButton>
            </div>
        }
    </Content>
</BSOffCanvas>

@if (Blocks != null)
{
	<div class="block-field-view">
        <div style="display: flex;gap:0.25rem">
            <FluentButton class="block-field-add-btn" OnClick="e => BlockClipboard.CopyAsync(Blocks)" title="Copy all" IconStart="new Icons.Regular.Size16.Copy()" />
            <FluentButton class="block-field-add-btn" OnClick="e => BlockClipboard.PasteAsync(0, Blocks)" Disabled="Field.IsReadOnly" title="Paste" IconStart="new Icons.Regular.Size16.ClipboardPaste()" style="flex:0" />
            <FluentButton class="block-field-add-btn" OnClick="e => OpenModal(0)" Disabled="Field.IsReadOnly" title="Insert block" style="flex:1" IconStart="new Icons.Regular.Size16.Add()" />
        </div>

		@for (int i = 0; i < Blocks.Count; i++)
		{
			int curIndex = i;
            Block block = Blocks[curIndex];

			<div class="block-field">
				<div class="block-field-options">
                    <FluentButton Appearance="Appearance.Accent" IconStart="new Icons.Regular.Size16.CodeBlock()">@block.Name</FluentButton>
                    <FluentButton OnClick="e => Blocks.MoveUp(block)" Disabled="Field.IsReadOnly" title="Up" IconStart="new Icons.Regular.Size16.ArrowUp()" />
                    <FluentButton OnClick="e => Blocks.MoveDown(block)" Disabled="Field.IsReadOnly" title="Down" IconStart="new Icons.Regular.Size16.ArrowDown()" />
                    <FluentButton OnClick="e => Blocks.Remove(block)" Disabled="Field.IsReadOnly" title="Remove" IconStart="new Icons.Regular.Size16.Delete()" />
                    <FluentButton OnClick="e => BlockClipboard.CopyAsync(new[] { block })" title="Copy" IconStart="new Icons.Regular.Size16.Copy()" />
				</div>
				<div class="block-field-content">
                    @ComponentManager.CreateComponent(block)
				</div>
			</div>

            <div style="display: flex;gap:0.25rem">
                <FluentButton class="block-field-add-btn" OnClick="e => BlockClipboard.PasteAsync(curIndex + 1, Blocks)" Disabled="Field.IsReadOnly" title="Paste" style="flex:0" IconStart="new Icons.Regular.Size16.ClipboardPaste()" />
                <FluentButton class="block-field-add-btn" OnClick="e => OpenModal(curIndex + 1)" Disabled="Field.IsReadOnly" title="Insert block" style="flex:1" IconStart="new Icons.Regular.Size16.Add()" />
            </div>
		}
	</div>
}

@code {
    [CascadingParameter]
    public FieldComponent<BlockField> Field { get; set; }

    private BSOffCanvas? _offCanvas;

    public int Position { get; set; }

    public BSModal Modal { get; set; }

    [Parameter]
    public IList<Block> Blocks { get; set; }

    public async Task OpenModal(int position)
    {
        Position = position;

        await _offCanvas.ToggleAsync();
    }

    private async Task Add(BlockFactory factory)
    {
        await _offCanvas.ToggleAsync();

        Blocks.Insert(Position, factory.CreateBlock());
    }
}
