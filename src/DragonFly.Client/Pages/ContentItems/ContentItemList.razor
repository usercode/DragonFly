@page "/content/{SchemaName}"
@using static Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size24
@inherits EntityListComponent<ContentItem>
@rendermode DragonFlyRenderMode.Current

<div class="content-header">
    @if (ListMode == EntityListMode.Default)
    {
        <Toolbar Items="ToolbarItems" />
    }

    <div style="display:flex; gap: 0.25rem;">
        <FluentSearch style="flex:1;" Placeholder="Search" value="@SearchPattern" @onchange="async (x) => { Page = 0; SearchPattern = x.Value.ToString(); await NavigateAsync(); }" />
    </div>
</div>
<div class="scroll-content">
    <div class="row">
        <div class="col-auto">
            <QuerySelector ContentItemList="@this" />
        </div>
        <div class="col">
            @if (SearchResult == null)
            {
                <div class="spinner-border" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            }
            else
            {
                <FluentDataGrid 
                    TGridItem="ContentItem" 
                    AutoFit="true"
                    Items="SearchResult.Items.AsQueryable()" 
                    ShowHover="true" 
                    OnRowClick="@(x => Navigation.NavigateTo($"content/{x.Item.Schema.Name}/{x.Item.Id}"))">

                    <TemplateColumn Title="Published" Width="auto">
                        @if (context.PublishedAt != null)
                        {
                            <FluentIcon Value="@(new Checkmark())" Title="Published" />
                        }
                        else
                        {
                            <FluentIcon Value="@(new Circle())" Title="Unpublished" Style="visibility:hidden" />
                        }
                    </TemplateColumn>

                    @foreach (var field in Schema.GetListFields())
                    {
                        @*  <PropertyColumn Property="@(p => p.Fields[""])" Sortable="true" /> *@

                        <TemplateColumn Title="@field.Key">
                            @{
                                var content = context.Fields[field.Key];
                            }

                            @if(content is AssetField assetField)
                            {
                                <img src="@assetField.Asset.PreviewUrl" style="height:50px" />
                            }
                            else if(content is ReferenceField referenceField && referenceField.ContentItem != null)
                            {
                                <ReferenceFields ContentItem="@referenceField.ContentItem" />
                            }
                            else if(content is BoolField boolField)
                            {
                                if (boolField.Value == true)
                                {
                                    <FluentIcon Value="@(new Check())" />
                                }
                            }
                            else
                            {
                                <span>@content</span>
                            }
                            </TemplateColumn>
                        }
                    </FluentDataGrid>
                }
            </div>
        </div>
</div>
<div>
    @if (SearchResult != null)
    {
        <BSPagination>
            <BSPaginationItem Href="#" PaginationLinkType="PaginationLinkType.PreviousIcon" />
            @for (int i = 0; i < CountPages; i++)
            {
                int i2 = i;

                <BSPaginationItem PaginationLinkType="PaginationLinkType.Custom" @onclick="x => Page = i2">@(i2 + 1)</BSPaginationItem>
            }

            <BSPaginationItem Href="#" PaginationLinkType="PaginationLinkType.NextIcon" />

        </BSPagination>
    }
</div>
