@inject ComponentManager FieldComponentManager

@if (ContentItemList.Schema != null)
{
    <h4 class="query-title">Order</h4>

    <MudExpansionPanels>
        <MudExpansionPanel Text="Order" Expanded="true">
            @foreach (FieldOrder field in ContentItemList.OrderFields)
            {
                <BSListGroupItem style="display:flex;align-items:center">
                    <span>@field.Name</span>
                    <div style="flex-grow:1"></div>

                    <OrderDirection Order="field" />
                    <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward" OnClick="x => ContentItemList.OrderFields.MoveUp(field)" Title="Up" />
                    <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward" OnClick="x => ContentItemList.OrderFields.MoveDown(field)" Title="Down" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="x => ContentItemList.OrderFields.Remove(field)" Title="Remove" />
                </BSListGroupItem>
            }
        </MudExpansionPanel>
    </MudExpansionPanels>

    <FluentMenuButton Text="Add indexed field">
        @foreach (var field in GetUnsedOrderFields())
        {
            <FluentMenuItem Id="@field.Key" OnClick="x => ContentItemList.OrderFields.Add(new FieldOrder(field.Key, true))">@field.Key</FluentMenuItem>
        }
    </FluentMenuButton>
    
    <h4 class="query-title">Filter</h4>

    <MudExpansionPanels>
        @foreach (var fieldQuery in ContentItemList.QueryFields)
        {
            <MudExpansionPanel Text="@fieldQuery.FieldName" Expanded="true">
                @FieldComponentManager.CreateComponent(fieldQuery)
            </MudExpansionPanel>
        }
    </MudExpansionPanels>
}

@code {

    [Parameter]
    public ContentItemList ContentItemList { get; set; }

    [Parameter]
    public ISchemaElement Schema { get; set; }

    private IDictionary<string, SchemaField> GetUnsedOrderFields()
    {
        return ContentItemList.Schema.Fields
                                          .Where(x => x.Value.Options?.HasIndex == true)
                                          .Where(f => ContentItemList.OrderFields.Any(a => a.Name == f.Key) == false)
                                          .ToDictionary();
    }
}