@page "/content/{EntityType}/{EntityId:guid}"
@page "/content/{EntityType}/create"
@page "/content/{EntityType}/create/{CloneFromEntityId:guid}"
@inherits ContentItemDetailBase
@rendermode DragonFlyRenderMode.Current

<CascadingValue Value="this" IsFixed="true">
    @if (Entity != null)
    {
        <BSOffCanvas @ref="_versionsModal" Placement="Placement.Right">
            <Header>Versions</Header>
            <Content>
                @if (Versions != null)
                {
                    @foreach (var item in Versions)
                    {
                        <div style="margin:0.5rem 0">
                            <FluentButton style="width:100%;text-align:left" OnClick="async x => await AddContentVersionsAsync(item.Id)">
                                <span>@item.Modified.Value.ToString()</span>
                                @if (item.PublishedAt != null)
                                {
                                    <FluentBadge Appearance="Appearance.Accent">
                                        Published
                                    </FluentBadge>
                                }
                            </FluentButton>
                        </div>
                    }
                }
            </Content>
        </BSOffCanvas>

        <div class="content-header">
            <h1>@Entity.Schema.Name</h1>

            <Toolbar Items="ToolbarItems"></Toolbar>

            @* notifications *@
            @foreach (NotificationItem notification in Notifications)
            {
                <div style="margin-top: 1rem">
                    <FluentBadge Appearance="Appearance.Accent">@notification.Message</FluentBadge>
                </div>
            }
        </div>
        <div class="scroll-content">
            <FluentTabs>
                <FluentTab Label="Details">                   
                        <BSForm Model="Entity" class="entity-content">
                            @{
                                var items = Entity.Schema.Fields
                                .OrderBy(x => x.Value.SortKey)
                                .Select((x, index) => new { FieldName = x.Key, FieldIndex = index })
                                .ToList();
                            }

                            @* grid for fields *@
                            <div style="display:grid; gap: 0.25rem 1rem; grid-template-columns: auto @(string.Join(" ", Enumerable.Range(0, SelectedVersions.Count + 1).Select(x=> "1fr"))); grid-template-rows: auto auto @(string.Join(" ", Enumerable.Range(0, items.Count).Select(x=> "auto")))">

                                @* ID label *@
                                <div class="field" style="grid-column: 1; grid-row: 2">
                                    <BSLabel class="field-label">ID</BSLabel>
                                </div>

                                @*  field labels *@
                                @for (int i = 0; i < items.Count; i++)
                                {
                                    int a = i;
                                    <div class="field" style="grid-column: 1; grid-row: @(items[i].FieldIndex + 3)">
                                        <BSAlert Color="GetFieldColor(items[i].FieldName)">
                                            <BSLabel class="field-label">@items[a].FieldName</BSLabel>
                                        </BSAlert>
                                    </div>
                                }

                                @* field values *@
                                <ContentItemFields2 Content="Entity" Title="@(SelectedVersions.Count > 0 ? "Master" : null)" />

                                @for (int i = 0; i < SelectedVersions.Count; i++)
                                {
                                    <ContentItemFields2 Content="SelectedVersions[i]"
                                                        Column="i+2"
                                                        IsReadOnly="true"
                                                        Title="@SelectedVersions[i].ModifiedAt.ToString()" />
                                }
                            </div>
                        </BSForm>
                </FluentTab>
                <FluentTab Label="Referenced by">                   
                        <DragonFly.Client.Pages.ContentReferences.ReferencedBy Schema="@Entity.Schema.Name" Id="Entity.Id" />                   
                </FluentTab>
            </FluentTabs>
        </div>

        <div class="footer-content">
            <div class="row">
                <div class="col-sm-4">
                    <p>Created: @Entity.CreatedAt</p>
                </div>
                <div class="col-sm-4">
                    <p>Modified: @Entity.ModifiedAt</p>
                </div>
                <div class="col-sm-4">
                    <p>Published: @Entity.PublishedAt</p>
                </div>
            </div>
        </div>
    }
</CascadingValue>