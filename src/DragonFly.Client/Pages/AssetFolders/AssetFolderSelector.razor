@inject IAssetFolderStorage Storage

<div>
    @for(int i = 0; i < Folders.Count; i++)
    {
        AssetFolderNode folderNode = Folders[i];

        <div style="margin: 0.25rem">
            <FluentButton OnClick="x => folderNode.IsExpanded = !folderNode.IsExpanded" title="Expand folder">
                @if (folderNode.IsExpanded)
                {
                    <i class="fa-solid fa-folder-open"></i>
                }
                else
                {
                    <i class="fa-solid fa-folder"></i>
                }
            </FluentButton>
            <FluentButton OnClick="x => FolderClicked?.Invoke(folderNode.Folder)">
                @folderNode.Folder.Name
            </FluentButton>
            <FluentButton OnClick="async x => await DeleteAsync(folderNode)" title="Delete folder">
                <i class="fas fa-times"></i>
            </FluentButton>
        </div>
        @if (folderNode.IsExpanded)
        {
            <div style="margin-left:2rem">
                <AssetFolderSelector RootFolder="folderNode.Folder" FolderClicked="FolderClicked" />
            </div>
        }
    }
    <div style="margin: 0.25rem;display:flex;gap:0.25rem">
        <FluentButton OnClick="async x => await CreateNewFolderAsync()" title="Create folder">
            <i class="fa-solid fa-plus"></i>
        </FluentButton>
        <input type="text" class="form-control" style="width:50%" placeholder="Folder name" @bind-value="NewFolderName">
    </div>
</div>

@code {

   
}
