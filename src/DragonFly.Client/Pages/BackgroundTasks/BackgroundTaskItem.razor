<div class="list-group-item @Task.State.ToCss()">
    <BSRow>
        <BSCol ColumnLarge="1">
            <span>@Task.Id </span>
        </BSCol>
        <BSCol ColumnLarge="1">
            <span>
                @if (Task.State == BackgroundTaskState.Running)
                {
                    <i class="fa-solid fa-sync fa-spin" style="margin-right: 0.5rem"></i>
                }
                @Task.State
            </span>
        </BSCol>
        <BSCol ColumnLarge="1">
            <BSProgressBar Min="0" Max="Task.ProgressMaxValue" Value="Task.ProgressValue">@(((double)Task.ProgressValue * 100 / Task.ProgressMaxValue).ToString("0"))%</BSProgressBar>
        </BSCol>
        <BSCol ColumnLarge="4">
            <span>@Task.Name </span>
        </BSCol>
        <BSCol ColumnLarge="2">
            <span>@Task.CreatedBy </span>
        </BSCol>
        <BSCol ColumnLarge="2">
            <span>@Task.Status</span>
        </BSCol>
        <BSCol ColumnLarge="1">
            @if (Task.State == BackgroundTaskState.Running)
            {
                <BSButton Color="BSColor.Light" OnClick="async x => await CancelTask()">Cancel</BSButton>
            }
        </BSCol>
    </BSRow>
</div>
@foreach (BackgroundTaskInfo child in Tasks.Where(x => x.ParentTaskId == Task.Id))
{
    <div style="margin-left: 1rem">
        <BackgroundTaskItem Task="child" Tasks="Tasks" />
    </div>
}

@code {
    [Parameter]
    public BackgroundTaskInfo Task { get; set; }

    [Parameter]
    public IEnumerable<IBackgroundTaskInfo> Tasks { get; set; }

    [Inject]
    public IBackgroundTaskService BackgroundTaskService { get; set; }

    private async Task CancelTask()
    {
        await BackgroundTaskService.CancelAsync(Task.Id);
    }
}
