@inject ComponentManager ComponentManager

<BSButton Color="BSColor.Light" class="add-field" OnClick="x => OpenModalAsync()"><i class="fas fa-plus"></i> Add Field</BSButton>

<BSOffCanvas @ref="_offCanvas" Placement="Placement.Right">
    <Header>Add field</Header>
    <Content>
        <div class="form-group row">
            <label class="col-sm-2 col-form-label">Name</label>
            <div class="col-sm-10">
                <input type="text" class="form-control" @bind-value="@Name" />
            </div>
        </div>

        <div class="form-group row">
            <label class="col-sm-2 col-form-label">Type</label>
            <div class="col-sm-10">
                <div class="row">
                    @foreach (Type p in FieldManager.Default.GetAllFieldTypes())
                    {
                        <div class="col-lg-12">
                            <BSButton OnClick="x => SelectedFieldType = p" Color="p == SelectedFieldType ? BSColor.Danger : BSColor.Light" style="width:100%; cursor:pointer;margin-bottom:0.5rem;">
                                <div class="text-start">
                                    @p.Name
                                </div>
                            </BSButton>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="mb-3">
            <BSButton OnClick="()=> { _offCanvas.ToggleAsync(); AddItem(); }" Color="BSColor.Primary">Add field</BSButton>
        </div>
    </Content>
</BSOffCanvas>

<CascadingValue Value="this" IsFixed="true">
    <BSListGroup>
        @foreach (var field in Schema.Fields.OrderBy(x => x.Value.SortKey))
        {
            <BSListGroupItem>
                <div style="display: flex; align-items: center;width:100%">
                    <span style="flex-grow:1">@field.Key</span>
                    <BSBadge Color="BSColor.Secondary" Class="bg-secondary">@field.Value.FieldType</BSBadge>
                    <div>
                        <BSButton Color="BSColor.Light" Target="@($"{field.Key}_collapse")"><i class="fa-solid fa-gear"></i></BSButton>
                        <BSButton Color="BSColor.Light" OnClick="x => Up(field.Key)"><i class="fas fa-arrow-up"></i></BSButton>
                        <BSButton Color="BSColor.Light" OnClick="x => Down(field.Key)"><i class="fas fa-arrow-down"></i></BSButton>
                        <BSButton Color="BSColor.Light" OnClick="x => Remove(field.Key)"><i class="fas fa-times"></i></BSButton>
                    </div>
                </div>

                <BSCollapse DataId="@($"{field.Key}_collapse")">
                    @if (field.Value.Options != null)
                    {
                        @ComponentManager.CreateComponent(field.Value.Options)
                    }
                </BSCollapse>
            </BSListGroupItem>
        }
    </BSListGroup>
</CascadingValue>

@code {
    private BSOffCanvas _offCanvas;

    [Parameter]
    public ISchemaElement Schema { get; set; }

    public string Name { get; set; }

    public Type SelectedFieldType { get; set; }

    public IEnumerable<Type> FieldTypes { get; private set; }

    protected async Task OpenModalAsync()
    {
        await _offCanvas.ToggleAsync();

        SelectedFieldType = FieldTypes.FirstOrDefault();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        FieldTypes = FieldManager.Default.GetAllFieldTypes();
    }

    protected void AddItem()
    {
        var options = FieldManager.Default.CreateOptions(SelectedFieldType);

        Schema.Fields.Add(Name, new SchemaField(SelectedFieldType.Name, options));

        StateHasChanged();

    }

    public void Up(string key)
    {
        var list = Schema.Fields
                                .OrderBy(x => x.Value.SortKey)
                                .ToList();

        for (int i = 0; i < list.Count; i++)
        {
            if (i != 0 && list[i].Key == key)
            {
                list[i - 1].Value.SortKey = i;
                list[i].Value.SortKey = i - 1;
            }
            else
            {
                list[i].Value.SortKey = i;
            }
        }

        StateHasChanged();
    }

    public void Down(string key)
    {
        var list = Schema.Fields
                                .OrderBy(x => x.Value.SortKey)
                                .ToList();

        for (int i = 0; i < list.Count; i++)
        {
            if (i < list.Count - 1 && list[i].Key == key)
            {
                list[i].Value.SortKey = i + 1;
                list[i + 1].Value.SortKey = i;
                i++;
            }
            else
            {
                list[i].Value.SortKey = i;
            }
        }

        StateHasChanged();
    }

    public void Remove(string key)
    {
        Schema.Fields.Remove(key);

        StateHasChanged();
    }
}
