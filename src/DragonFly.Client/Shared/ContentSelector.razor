@inject NavigationManager NavigationManager

<BSModal @ref="Modal" IsFullScreen="true" IsScrollable="true" Size="Size.ExtraLarge">
    <Header>Select asset</Header>
    <Content>
        @if (Modal.Shown)
        {
            <ContentItemTypeList2 Closed="(a, x) => { if (x == true) ItemAdded((ContentItemTypeList2)a); }" ListMode="EntityListMode.Single"></ContentItemTypeList2>
        }
    </Content>
    <Footer>
        <BSButton Color="BSColor.Primary" @onclick="() => Modal.HideAsync() ">Ok</BSButton>
    </Footer>
</BSModal>

<div class="content-selector">
    <div class="row" style="align-items:center">
        @if (ContentItem != null)
        {
            <div class="col-lg">
                <span class="badge bg-primary">@ContentItem.Schema.Name</span>
            </div>
            @foreach (string field in ContentItem.Schema.ReferenceFields)
            {
                <div class="col-lg">
                    @if (ContentItem.TryGetField(field, out ContentField column))
                    {
                        @if (column is ISingleValueField singleValueField)
                        {
                            <span>@singleValueField.Value</span>
                        }
                        else if (column is AssetField assetField)
                        {
                            @if (assetField.Asset != null && assetField.Asset.IsImage())
                            {
                                <img src="@assetField.Asset.PreviewUrl" style="height:2rem;object-fit:contain" />
                            }
                        }
                    }
                </div>
            }
        }
        else
        {
            <div class="col-lg">
                <span>...</span>
            </div>
        }

        <div class="col-lg-auto">
            <div class="options">
                @if (ContentItem != null)
                {
                    <BSButton Color="BSColor.Light" OnClick="e => Navigate()" title="Navigate"><i class="fas fa-arrow-right"></i></BSButton>
                    <BSButton Color="BSColor.Light" OnClick="e => RemoveItem()" IsDisabled="IsReadOnly" title="Remove"><i class="fas fa-trash"></i></BSButton>
                }
                <BSButton Color="BSColor.Light" title="Select" IsDisabled="IsReadOnly" OnClick="e => Modal.ShowAsync()"><i class="fas fa-plus"></i></BSButton>
            </div>
        </div>
    </div>
</div>

@code {
    public BSModal Modal { get; set; }

    [Parameter]
    public bool IsReadOnly { get; set; }

    private ContentItem _contentItem;

    [Parameter]
    public ContentItem ContentItem
    {
        get => _contentItem;
        set
        {
            if (_contentItem != value)
            {
                _contentItem = value;

                ContentItemChanged?.Invoke(_contentItem);
            }
        }
    }

    [Parameter]
    public Action<ContentItem> ContentItemChanged { get; set; }

    protected void Navigate()
    {
        NavigationManager.NavigateToContent(ContentItem);
    }

    protected void RemoveItem()
    {
        ContentItem = null;
    }

    public async void ItemAdded(ContentItemTypeList2 sender)
    {
        ContentItem = sender.SelectedContentItem;

        await Modal.HideAsync();

        StateHasChanged();
    }
}
