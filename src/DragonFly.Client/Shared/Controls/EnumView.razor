@typeparam TEnum

<div class="enum-field">
    <FluentSelect 
                    TOption="TEnum" 
                    Items="EnumValues"                    
                    Disabled="IsReadOnly"
                    @bind-SelectedOption="EnumValue"
                    />
</div>

@code {    
    private static Type EnumType { get; set; } = GetEnumType();
    private static TEnum[] EnumValues = GetEnumValues();
    private static bool IsEnumNullable { get; } = EnumType != typeof(TEnum);

    private static TEnum[] GetEnumValues()
    {
        return Enum.GetValues(EnumType)
                                .Cast<TEnum>()
                                .ToArray();
    }

    private static Type GetEnumType()
    {
        Type type = typeof(TEnum);

        //is nullable type?
        if (Nullable.GetUnderlyingType(type) is Type nullableType)
        {
            type = nullableType;
        }

        return type;
    }

    [Parameter]
    public bool IsReadOnly { get; set; }

    private TEnum _enumValue;

    [Parameter]
    public TEnum EnumValue
    {
        get => _enumValue;
        set
        {
            if (Equals(_enumValue, value) == false)
            {
                _enumValue = value;

                EnumValueChanged?.Invoke(_enumValue);
            }
        }
    }

    [Parameter]
    public Action<TEnum> EnumValueChanged { get; set; }
}