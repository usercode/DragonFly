@typeparam TEnum

<BSDropdown style="margin-bottom: 1rem">
    <Toggler><BSToggle IsButton="true" Color="BSColor.Light">@(EnumValue is null ? Undefined : EnumValue)</BSToggle></Toggler>
    <Content>
        @if (typeof(TEnum).IsGenericType)
        {
            <BSDropdownItem @onclick="e => EnumValue = default" IsDisabled="IsReadOnly">(none)</BSDropdownItem>
        }
        @foreach (TEnum value in Enum.GetValues(EnumType))
        {
            <BSDropdownItem @onclick="e => EnumValue = value" IsDisabled="IsReadOnly">@value</BSDropdownItem>
        }
    </Content>
</BSDropdown>

@code {
    private string Undefined { get; set; }
    private Type EnumType { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        EnumType = typeof(TEnum);

        //is nullable type?
        if (EnumType.IsGenericType)
        {
            EnumType = EnumType.GenericTypeArguments[0];
        }

        Undefined = EnumType.Name;
    }

    [Parameter]
    public bool IsReadOnly { get; set; }

    private TEnum _enumValue;

    [Parameter]
    public TEnum EnumValue
    {
        get => _enumValue;
        set
        {
            _enumValue = value;

            EnumValueChanged?.Invoke(_enumValue);
        }
    }

    [Parameter]
    public Action<TEnum> EnumValueChanged { get; set; }
}