<div class="bool-field-view options">

    @* <FluentRadioGroup @bind-Value=Value>
        <FluentRadio Value="1">True</FluentRadio>
        <FluentRadio Value="2">False</FluentRadio>
        <FluentRadio Value="3">False</FluentRadio>
    </FluentRadioGroup> *@

    <FluentButton Appearance="@(Value == true ? Appearance.Accent : Appearance.Neutral)" IconStart="@(new Icons.Regular.Size16.CheckboxChecked())" OnClick="x => OnChange(true)" Disabled="IsReadOnly">
        <span>True</span>
    </FluentButton>

    <FluentButton Appearance="@(Value == false ? Appearance.Accent : Appearance.Neutral)" IconStart="@(new Icons.Regular.Size16.CheckboxUnchecked())" OnClick="x => OnChange(false)" Disabled="IsReadOnly">
        <span>False</span>
    </FluentButton>
    @if (AllowUnset)
    {
        <FluentButton Appearance="@(Value == null ? Appearance.Accent : Appearance.Neutral)" IconStart="@(new Icons.Regular.Size16.CheckboxCheckedSync())" OnClick="x => OnChange(null)" Disabled="IsReadOnly">
            <span>Unset</span>
        </FluentButton>
    }
</div>

@code {

    [Parameter]
    public bool? Value { get; set; }

    [Parameter]
    public Action<bool?> ValueChanged { get; set; }

    [Parameter]
    public bool AllowUnset { get; set; } 

    [Parameter]
    public bool IsReadOnly { get; set; }

    private void OnChange(bool? value)
    {
        if (Value != value)
        {
            Value = value;

            ValueChanged?.Invoke(value);
        }
    }
}
