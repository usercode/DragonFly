@inject NavigationManager NavigationManager

<BSModal @ref="Modal" IsFullScreen="true" IsScrollable="true" IsCentered="true">
    <Header>Select asset</Header>
    <Content>
        @if (Modal.Shown)
        {
            <AssetList ItemSelected="ItemAdded" ListMode="EntityListMode.Single" />
        }
    </Content>
    <Footer>
        <BSButton Color="BSColor.Primary" @onclick="() => Modal.HideAsync()">Ok</BSButton>
    </Footer>
</BSModal>

<div class="content-selector">
    <div style="display:flex;justify-content:space-between;align-items:center">
        @if (Asset != null)
        {
            <a href="asset/@Asset.Id" class="link-dark">
                <span style="overflow-wrap: anywhere;">@Asset.Name (@Asset.MimeType)</span>
            </a>
        }
        else
        {
            <span></span>
        }

        <div class="options">
            @if (Asset != null)
            {
                <MudButton OnClick="e => Navigate()" title="Navigate" StartIcon="@Icons.Material.Filled.ArrowRight" />
                @if (ShowDownloadButton)
                {
                    <MudButton OnClick="e => NavigationManager.NavigateTo(Asset.GetPublicUrl(), true)" target="_blank" title="Download" StartIcon="@Icons.Material.Filled.ArrowDownward" />
                }
                <MudButton OnClick="e => RemoveItem()" title="Remove" Disabled="IsReadOnly" StartIcon="@Icons.Material.Filled.Delete" />
            }
            <MudButton OnClick="e => OpenModal()" title="Select" Disabled="IsReadOnly" StartIcon="@Icons.Material.Filled.Add" />
        </div>
    </div>

    @if (Asset != null && ShowPreview)
    {
        <div class="image" style="margin: 1rem 0;">
            @if (string.IsNullOrEmpty(Asset.PreviewUrl) == false)
            {
                @if (Asset.IsSVG())
                {
                    <img src="@Asset.PreviewUrl" style="height:200px" />
                }
                else
                {
                    <img src="@Asset.PreviewUrl" />
                }
            }
        </div>
    }
</div>

@code {

    public BSModal Modal { get; set; }

    private Asset _asset;

    [Parameter]
    public Asset Asset
    {
        get => _asset;
        set
        {
            if (_asset != value)
            {
                _asset = value;

                AssetChanged?.Invoke(_asset);
            }
        }
    }

    [Parameter]
    public Action<Asset> AssetChanged { get; set; }

    [Parameter]
    public bool ShowDownloadButton { get; set; }

    [Parameter]
    public bool ShowPreview { get; set; }

    [Parameter]
    public bool IsReadOnly { get; set; }

    protected void Navigate()
    {
        NavigationManager.NavigateToAsset(Asset);
    }

    protected void RemoveItem()
    {
        Asset = null;
    }

    public async void OpenModal()
    {
        await Modal.ShowAsync();
    }

    public async void ItemAdded(Asset asset)
    {
        Asset = asset;

        await Modal.HideAsync();

        StateHasChanged();
    }
}
